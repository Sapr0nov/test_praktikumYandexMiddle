import { LoginPage, SettingsPage, RegistrationPage, ErrorPage404, ErrorPage500 } from './pages'
import { default as Index } from './pages/chat/chat'
import { ValidateForm } from "./modules/Validate"
import { ApiAction } from "./modules/ApiAction"
import { bus as eventsBus } from "./modules/EventBus"
import { UserFields, user as User } from "./modules/User"
import Router from "./modules/Router";

const api = new ApiAction();
const validator = new ValidateForm();
const urlPath = document.location.pathname;

const router = new Router(window);
if (
  window.location.pathname == "/404/" ||
  window.location.pathname == "/500/"
) {
  document.body.classList.add("e404");
} else {
  document.body.classList.remove("e404");
}

router.use("/messenger", new Index());
router.use("/sign-up", new RegistrationPage());
router.use("/", new LoginPage());
router.use("", new LoginPage());
router.use("/settings", new SettingsPage());
router.use("/500/", new ErrorPage500());
router.use("/404/", new ErrorPage404());

router.start();

eventsBus.register("getUser", (user: UserFields) => {
  if (user.reason) {
    console.log("error: ", user.reason);
    router.go("/");
  } else {
    [
      User.id,
      User.first_name,
      User.second_name,
      User.display_name,
      User.login,
      User.email,
      User.phone,
      User.avatar,
    ] = [
      user.id,
      user.first_name,
      user.second_name,
      user.display_name,
      user.login,
      user.email,
      user.phone,
      user.avatar,
    ];
    User.currentChat = {
      id: null,
      status: null,
      socket: null,
      token: null,
      pingId: null,
    };
    User.setCookie();
    api.chatList();
    // open messenger after registration or authorization
    if (User.id && (urlPath == "/" || urlPath == "" || urlPath == "/sign-up")) {
      api.chatList();
      router.go("/messenger");
    }
  }
});

eventsBus.register("goAuth", () => {
  router.go("/");
});


eventsBus.register("signIn", (req: XMLHttpRequest) => {
  if (req.response == "OK") {
    api.getUser();
    router.go("/messenger");
  } else {
    const err = JSON.parse(req.response as string);
    if (err.reason == "User already in system") {
      api.getUser();
      router.go("/messenger");
    } else {
      alert(err.reason);
    }
  }
});

eventsBus.register("rendered", (newNode: ChildNode) => {
  if (
    !User.id &&
    (window.location.pathname == "/messenger" ||
      window.location.pathname == "/settings")
  ) {
    api.getUser();
  }
  reEvents(newNode);
});

eventsBus.register("loadedChatList", (req: XMLHttpRequest) => {
  if (req.status == 200) {
    User.chats = JSON.parse(req.response);
    if (window.location.pathname == "/messenger") {
      router.go("/messenger");
    }
  }
});

eventsBus.register("updateUserData", (req: XMLHttpRequest) => {
  if (req.status == 200) {
    api.getUser();
    alert("Данные обновлены");
  }
});

eventsBus.register("uploadedAvatar", (req: XMLHttpRequest) => {
  if (req.status == 200) {
    api.getUser();
    if (window.location.pathname == "/settings") {
      router.go("/settings");
    }
  }
});

eventsBus.register("updatedPassword", (req: XMLHttpRequest) => {
  if (req.status == 200) {
    alert("Пароль обновлен");
  } else {
    console.log(req.response);
  }
});

eventsBus.register("createdChat", (req: XMLHttpRequest) => {
  if (req.status == 200) {
    alert("Чат успешно создан!");
    if (window.location.pathname == "/messenger") {
      router.go("/messenger");
    }
  } else {
    console.log(req.response);
  }
});

eventsBus.register("addedUserToChat", (req: XMLHttpRequest) => {
  if (req.status == 200) {
    alert("Пользователь добавлен!");
  } else {
    console.log(req.response);
  }
});

eventsBus.register("deletedUserFromChat", (req: XMLHttpRequest) => {
  if (req.status == 200) {
    alert("Пользователь удален!");
  } else {
    console.log(req.response);
  }
});

eventsBus.register("gotToken", (req: XMLHttpRequest) => {
  if (req.status == 200) {
    User.currentChat.token = JSON.parse(req.response).token;
    api.socketConnect(User.id!, User.currentChat.id!, User.currentChat.token!);
    if (User.currentChat.pingId) {
      clearInterval(User.currentChat.pingId);
    }
    User.currentChat.pingId = setInterval(() => {
      if (User.currentChat.status == "connect") {
        sendPing();
      } else {
        clearInterval(User.currentChat.pingId);
      }
    }, 1000);
  }
});

router.start();
